---
title: "In-Class Exercise 2"
author: Jonathan Ley
execute: 
  eval: false
  massage: false
editor: visual
---

## 1. Overview

### 1.1. Background

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on [WPDx Data Standard](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf).

### 1.2. Overall Goal

This study aims to apply appropriate global and local measures of spatial Association techniques to reveal the spatial patterns of Not Functional water points in Nigeria.

### 1.3. Key Objectives

Using the appropriate R packages, we will need to:

-   Prepare the dataset and save it in simple feature data frameformat, as well as derive the proportion of functional and non-functional water point at LGA level

-   Conduct thematic mapping analysis to examine the spatial distribution of functional and non-functional water point rate at LGA level

-   Conduct hotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level

## 2. Setup

### 2.1 Packages Used

The R packages that we will be using for this analysis area:

-   **sf**: used for importing, managing, and processing geospatial data

-   **tidyverse**: used for wrangling attribute data

-   **spdep**: used for computing spatial weights, global and local spatial auto-correlation statistics

-   **tmap**: used for creating cartographic quality choropleth map

-   **funModeling:** used for exploratory data analysis, data preparation and model performance

In addition, the following tidyverse packages will be used:

-   **tidyr** for manipulating and tidying data

-   **dplyr** for wrangling and transforming data

-   **ggplot2** for visualising data

### 2.2 Datasets Used

2 geospatial datasets will be utilized for this study:

-   **geo_export_338e5689-bd72-4866-bfde-8997933e9897**

    WPdx+ dataset from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)

-   **nga_admbnda_adm2_osgof_20190417**

    Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data from [geoBoundaries](https://www.geoboundaries.org/)

### 2.3 Launching the packages in R

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, funModeling)
```

## 3. Data Preparation

In this section, we will bring geospatial data into R environment. The geospatial data is in ESRI shapefile format.

### 3.1 Import water point shapefile into R environment

The code chunk below uses st_read() of sf package to import Nigeria shapefile into R. The imported shapefile will be simple features Object of sf.

```{r}
#| eval: false
wp <- st_read(dsn = "geodata",
              layer = "geo_export_338e5689-bd72-4866-bfde-8997933e9897",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria") %>%
  select(1:4, 13:15, 23, 36:40)

```

The code chunk below uses write_rds() of readr package to save the extracted sf data table (i.e. wp) into an output in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.

```{r}
#| eval: false
wp_nga <- write_rds(wp, "geodata/wp_nga.rds")
```

### 3.2 Import Nigeria LGA boundary data into R environment

We are going to import LGA boundary data into R environment using the following code chunk, st_read() of sf package. It is used to import nga_admbnda_adm2_osgof_20190417 shapefile and save the imported geospatial data into simple feature data table.

```{r}
#| eval: false
nga <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

### 3.3 Recoding NA values into string

Use replace_na() to recode all the NA values in status_cle field into the Unknown.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown")) 
```

## 4. Exploratory Spatial Data Analysis

Use freq() of funModeling package to display the distribution of status_cle field in wp_nga.

```{r}
#| eval: false
freq(data = wp_nga,
     input = "status_cle")
```

### 4.1 Extract functional water point data

In the code chunk below, filter() of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))

freq(data=wpt_functional, 
     input = 'status_cle')
```

### 4.2 Extract non-functional water point data

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))

freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### 4.3 Extract water point data with Unknown class

In the code chunk below, filter() of dplyr is used to select unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

### 4.4 Performing Point-in-Polygon Count

The code chunk below performs 2 operations at one go. Firstly, it uses st_intersects() to identify the various water point types (e.g. total, functional, non-functional and unknown) located inside each LGA boundary. Next, length() of Base R is used to calculate the number of water points that fall within each LGA boundary.

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

### 4.5 Saving the Analytical Data Table

The code chunk below uses mutate() of dplyr package to derive 2 fields namely pct_functional and pct_non-functional. In order to keep the file size small, select() of dplyr is used to retain on the relevant fields.

```{r}
#| eval: false

nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)

```

Thereafter, we will save the sf data table in rds format for subsequent analysis.

```{r}
#| eval: false

write_rds(nga_wp, "geodata/nga_wp.rds")

```

## 5. Geospatial Visualization & Analysis

### 5.1 Thematic Mapping of Functional and Non-Functional Water Points at LGA level

In order to draw a choropleth map, we will use qtm() of tmap package. Small choropleth maps are created with tmap_arrange().

```{r}
#| eval: false

nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```

### 
