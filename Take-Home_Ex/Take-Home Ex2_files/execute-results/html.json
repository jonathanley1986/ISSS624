{
  "hash": "57aab8fa4bc2e8438bb3977a1d596b1f",
  "result": {
    "markdown": "---\ntitle: \"Take-Home Exercise 2 - Geospatial Analytics for Social Good\"\neditor: visual\n---\n\n\n## 1. Overview\n\n### 1.1. Background\n\nThe process of creating regions is called [regionalisation](https://www.researchgate.net/publication/28153673_Supervised_Regionalization_Methods_A_Survey/link/0fcfd5094046b13d35000000/download). A regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.\n\n### 1.2. Overall Goal\n\nThis study aims to apply appropriate clustering techniques to reveal the spatial patterns of water points in Nigeria.\n\n### 1.3. Key Objectives\n\nUsing the appropriate R packages, we will need to:\n\n-   Prepare the dataset and save it in simple feature data frameformat, as well as derive the proportion of functional and non-functional water point at LGA level\n\n-   Conduct thematic mapping analysis to examine the spatial distribution of water points at LGA level\n\n-   Conduct hotspot areas and outliers/clusters maps of water points at LGA level\n\n## 2. Setup\n\n### 2.1 Packages Used\n\nThe R packages that we will be using for this analysis area:\n\n-   **sf, rgdal**: used for importing, managing, and processing geospatial data\n\n-   **spdep**: used for computing spatial weights, global and local spatial auto-correlation statistics\n\n-   **tidyverse**: used for wrangling attribute data\n\n-   **tmap**: used for creating cartographic quality choropleth map\n\n-   **coorplot, ggpubr, heatmaply:** used for multivariate data visualization and analysis\n\n-   **cluster, ClustGeo:** used for cluster analysis\n\n-   **funModeling:** used for exploratory data analysis, data preparation and model performance\n\nIn addition, the following tidyverse packages will be used:\n\n-   **readr** for reading rectangular data from csv, tsv and fwf\n\n-   **tidyr** for manipulating and tidying data\n\n-   **dplyr** for wrangling and transforming data\n\n-   **ggplot2** for visualising data\n\n### 2.2 Datasets Used\n\n2 geospatial datasets will be utilized for this study:\n\n-   **geo_export_338e5689-bd72-4866-bfde-8997933e9897**\n\n    WPdx+ dataset from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)\n\n-   **nga_admbnda_adm2_osgof_20190417**\n\n    Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data from [geoBoundaries](https://www.geoboundaries.org/)\n\n### 2.3 Launching the packages in R\n\nThe code chunk below is used to perform the following tasks:\n\n-   creating a package list containing the necessary R packages,\n\n-   checking if the R packages in the package list have been installed in R,\n\n    -   if they have yet to be installed, RStudio will installed the missing packages,\n\n-   launching the packages into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(rgdal, sf, spdep, tmap, tidyverse, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, funModeling)\n```\n:::\n\n\n## 3. Data Preparation\n\nIn this section, we will bring geospatial data into R environment. The geospatial data is in ESRI shapefile format.\n\n### 3.1 Import water point shapefile into R environment\n\nThe code chunk below uses st_read() of sf package to import Nigeria shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwp2 <- st_read(dsn = \"geodata\",\n              layer = \"geo_export_338e5689-bd72-4866-bfde-8997933e9897\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\") %>%\n  select(1, 3:4, 11:15, 23, 36:40, 43:50)\n```\n:::\n\n\nThe code chunk below uses write_rds() of readr package to save the extracted sf data table (i.e. wp) into an output in rds data format. The output file is called wp_nga2.rds and it is saved in geodata sub-folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_nga2 <- write_rds(wp2, \"geodata/wp_nga2.rds\")\n```\n:::\n\n\n### 3.2 Import Nigeria LGA boundary data into R environment\n\nWe are going to import LGA boundary data into R environment using the following code chunk, st_read() of sf package. It is used to import nga_admbnda_adm2_osgof_20190417 shapefile and save the imported geospatial data into simple feature data table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga2 <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n```\n:::\n\n\n### 3.3 Recoding NA values into string\n\nUse replace_na() to recode all the NA values in status_cle field into the Unknown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwp_nga2 <- read_rds(\"geodata/wp_nga2.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\")) \n```\n:::\n\n\n### 3.4 Checking of duplicated area name\n\nWe will order our dataframe by alphabetical order based on ADM2_REF and use the duplicated function to retrieve all ADM2_REF that has duplicates and store it in a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga2 <- (nga2[order(nga2$ADM2_REF), ])\n\nduplicate_area <- nga2$ADM2_REF [nga2$ADM2_REF %in%\n                  nga2$ADM2_REF[duplicated(nga2$ADM2_REF)]]\n\nduplicate_area\n```\n:::\n\n\nFrom the results, we identified 12 ADM2_REF that are duplicates. We will then leverage on interactive view of tmap to check the location of each area. With the help of Google Map, we will retrive the actual name and state of these areas.\n\n| Index | Actual Area Name  |\n|-------|-------------------|\n| 94    | Bassa (Kogi)      |\n| 95    | Bassa (Plateau)   |\n| 304   | Ifelodun (Kwara)  |\n| 305   | Ifelodun (Osun)   |\n| 355   | Irepodun (Kawara) |\n| 356   | Irepodun (Osun)   |\n| 518   | Nassarawa         |\n| 546   | Obi (Benue)       |\n| 547   | Obi (Nasarawa)    |\n| 693   | Surulere (Lagos)  |\n| 694   | Surulere (Oyo)    |\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"view\")\n\ntm_shape(nga2[nga2$ADM2_REF %in% duplicate_area,]) +\n  tm_polygons()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nWe will now access the individual index of the `nga2` data frame and change the value. Lastly, we use the [`length()`](https://rdrr.io/r/base/length.html) function to ensure there is no more duplicated ADM2_REF.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga2$ADM2_REF[c(94,95,304,305,355,356,519,546,547,693,694)] <- c(\"Bassa (Kogi)\",\"Bassa (Plateau)\", \"Ifelodun (Kwara)\",\"Ifelodun (Osun)\", \"Irepodun (Kwara)\",\"Irepodun (Osun), Nassarawa\",\"Obi (Benue)\",\"Obi(Nasarawa)\", \"Surulere (Lagos)\",\"Surulere (Oyo)\")\n\nlength((nga2$ADM2_REF[ nga2$ADM2_REF %in% nga2$ADM2_REF[duplicated(nga2$ADM2_REF)] ]))\n```\n:::\n\n\n### 3.5 Perform data binning for usage capacity field\n\nBefore we perform data binning, we will review the summary statistics of usage capacity field using the code chunk below. Based on the We will then use cut() function to categorize the values under usage_cap field to \\<1000 and \\>=1000.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(wp_nga2$usage_cap)\n\nwp_nga2 <- wp_nga2 %>% \n  mutate(usage_cap_bin = cut(usage_cap, breaks = c(0, 999, Inf), labels = c(\"<1000\", \">=1000\")))\n```\n:::\n\n\n## 4. Exploratory Spatial Data Analysis\n\nUse freq() of funModeling package to display the distribution of status_cle, X_water_tec, usage_cap_bin, is_urban field in wp_nga2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq(data = wp_nga2,\n     input = \"status_cle\")\n\nfreq(data = wp_nga2,\n     input = \"X_water_tec\")\n\nfreq(data = wp_nga2,\n     input = \"usage_cap_bin\")\n\nfreq(data = wp_nga2,\n     input = \"is_urban\")\n```\n:::\n\n\n### 4.1 Extract functional water point data\n\nIn the code chunk below, filter() of dplyr is used to select functional water points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpt_functional <- wp_nga2 %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n```\n:::\n\n\n### 4.2 Extract non-functional water point data\n\nIn the code chunk below, filter() of dplyr is used to select non-functional water points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpt_nonfunctional <- wp_nga2 %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nfreq(data=wpt_nonfunctional, \n     input = 'status_cle')\n```\n:::\n\n\n### 4.3 Extract water point data with Unknown class\n\nIn the code chunk below, filter() of dplyr is used to select unknown water points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpt_unknown <- wp_nga2 %>%\n  filter(status_cle == \"Unknown\")\n```\n:::\n\n\n### 4.4 Extract water point data with Hand Pump technology\n\nIn the code chunk below, filter() of dplyr is used to select hand pump water points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpt_handpump <- wp_nga2 %>%\n  filter(X_water_tec == \"Hand Pump\")\n```\n:::\n\n\n### 4.5 Extract LGA usage capacity\n\nIn the code chunk below, filter() of dplyr is used to select LGA usage capacities for \\<1000 and \\>=1000 respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlga_usage_cap_below1000 <- wp_nga2 %>%\n  filter(usage_cap_bin == \"<1000\")\n\nlga_usage_cap_atleast1000 <- wp_nga2 %>%\n  filter(usage_cap_bin == \">=1000\")\n```\n:::\n\n\n### 4.6 Extract rural water points\n\nIn the code chunk below, filter() of dplyr is used to select rural water points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpt_rural <- wp_nga2 %>%\n  filter(is_urban == \"False\")\n```\n:::\n\n\n### 4.7 Performing Point-in-Polygon Count\n\nThe code chunk below performs 2 operations at one go. Firstly, it uses st_intersects() to identify the various water point types (e.g. total, functional, non-functional, hand pump), usage capacity and rural water points located inside each LGA boundary. Next, length() of Base R is used to calculate the number of water points that fall within each LGA boundary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga_wp2 <- nga2 %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga2, wp_nga2))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga2, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga2, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga2, wpt_unknown))) %>%\n  mutate(`wpt handpump` = lengths(\n    st_intersects(nga2, wpt_handpump))) %>%\n  mutate(`lga usage cap b1000` = lengths(\n    st_intersects(nga2, lga_usage_cap_below1000))) %>%\n  mutate(`lga usage cap a1000` = lengths(\n    st_intersects(nga2, lga_usage_cap_atleast1000))) %>%\n  mutate(`wpt rural` = lengths(\n    st_intersects(nga2, wpt_rural)))\n```\n:::\n\n\n### 4.8 Saving the Analytical Data Table\n\nThe code chunk below uses mutate() of dplyr package to derive 6 fields namely pct_functional, pct_non-functional, pct_handpump, pct_usagecap_below1000, pct_usagecap_atleast1000 and pct_rural. In order to keep the file size small, select() of dplyr is used to retain on the relevant fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnga_wp2 <- nga_wp2 %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  mutate(`pct_handpump` = `wpt handpump`/`total wpt`) %>%\n  mutate(`pct_usagecap_below1000` = `lga usage cap b1000`/`total wpt`) %>%\n  mutate(`pct_usagecap_atleast1000` = `lga usage cap a1000`/`total wpt`) %>%\n  mutate(`pct_rural` = `wpt rural`/`total wpt`)\n```\n:::\n\n\nThereafter, we will save the sf data table in rds format for subsequent analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(nga_wp2, \"geodata/nga_wp2.rds\")\n```\n:::\n\n\n## \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}