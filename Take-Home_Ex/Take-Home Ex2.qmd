---
title: "Take-Home Exercise 2 - Geospatial Analytics for Social Good"
editor: visual
---

## 1. Overview

### 1.1. Background

The process of creating regions is called [regionalisation](https://www.researchgate.net/publication/28153673_Supervised_Regionalization_Methods_A_Survey/link/0fcfd5094046b13d35000000/download). A regionalisation is a special kind of clustering where the objective is to group observations which are similar in their statistical attributes, but also in their spatial location. In this sense, regionalization embeds the same logic as standard clustering techniques, but also applies a series of geographical constraints. Often, these constraints relate to connectivity: two candidates can only be grouped together in the same region if there exists a path from one member to another member that never leaves the region. These paths often model the spatial relationships in the data, such as contiguity or proximity. However, connectivity does not always need to hold for all regions, and in certain contexts it makes sense to relax connectivity or to impose different types of geographic constraints.

### 1.2. Overall Goal

This study aims to apply appropriate clustering techniques to reveal the spatial patterns of water points in Nigeria.

### 1.3. Key Objectives

Using the appropriate R packages, we will need to:

-   Prepare the dataset and save it in simple feature data frameformat, as well as derive the proportion of functional and non-functional water point at LGA level

-   Conduct thematic mapping analysis to examine the spatial distribution of water points at LGA level

-   Conduct hotspot areas and outliers/clusters maps of water points at LGA level

## 2. Setup

### 2.1 Packages Used

The R packages that we will be using for this analysis area:

-   **sf, rgdal**: used for importing, managing, and processing geospatial data

-   **spdep**: used for computing spatial weights, global and local spatial auto-correlation statistics

-   **tidyverse**: used for wrangling attribute data

-   **tmap**: used for creating cartographic quality choropleth map

-   **coorplot, ggpubr, heatmaply:** used for multivariate data visualization and analysis

-   **cluster, ClustGeo:** used for cluster analysis

-   **funModeling:** used for exploratory data analysis, data preparation and model performance

In addition, the following tidyverse packages will be used:

-   **readr** for reading rectangular data from csv, tsv and fwf

-   **tidyr** for manipulating and tidying data

-   **dplyr** for wrangling and transforming data

-   **ggplot2** for visualising data

### 2.2 Datasets Used

2 geospatial datasets will be utilized for this study:

-   **geo_export_338e5689-bd72-4866-bfde-8997933e9897**

    WPdx+ dataset from [WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)

-   **nga_admbnda_adm2_osgof_20190417**

    Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data from [geoBoundaries](https://www.geoboundaries.org/)

### 2.3 Launching the packages in R

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
#| eval: false
pacman::p_load(rgdal, sf, spdep, tmap, tidyverse, ClustGeo, ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, funModeling)
```

## 3. Data Preparation

In this section, we will bring geospatial data into R environment. The geospatial data is in ESRI shapefile format.

### 3.1 Import water point shapefile into R environment

The code chunk below uses st_read() of sf package to import Nigeria shapefile into R. The imported shapefile will be simple features Object of sf.

```{r}
#| eval: false
wp2 <- st_read(dsn = "geodata",
              layer = "geo_export_338e5689-bd72-4866-bfde-8997933e9897",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria") %>%
  select(1, 3:4, 11:15, 23, 36:40, 43:50)

```

The code chunk below uses write_rds() of readr package to save the extracted sf data table (i.e. wp) into an output in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.

```{r}
#| eval: false
wp_nga2 <- write_rds(wp2, "geodata/wp_nga2.rds")
```

### 3.2 Import Nigeria LGA boundary data into R environment

We are going to import LGA boundary data into R environment using the following code chunk, st_read() of sf package. It is used to import nga_admbnda_adm2_osgof_20190417 shapefile and save the imported geospatial data into simple feature data table.

```{r}
#| eval: false
nga2 <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

### 3.3 Recoding NA values into string

Use replace_na() to recode all the NA values in status_cle field into the Unknown.

```{r}
#| eval: false
wp_nga2 <- read_rds("geodata/wp_nga2.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown")) 
```

## 4. Exploratory Spatial Data Analysis

Use freq() of funModeling package to display the distribution of status_cle field in wp_nga.

```{r}
#| eval: false
freq(data = wp_nga2,
     input = "status_cle")
```

### 4.1 Extract functional water point data

In the code chunk below, filter() of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga2 %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))

freq(data=wpt_functional, 
     input = 'status_cle')
```

### 4.2 Extract non-functional water point data

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga2 %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))

freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### 4.3 Extract water point data with Unknown class

In the code chunk below, filter() of dplyr is used to select unknown water points.

```{r}
#| eval: false
wpt_unknown <- wp_nga2 %>%
  filter(status_cle == "Unknown")
```

### 4.4 Performing Point-in-Polygon Count

The code chunk below performs 2 operations at one go. Firstly, it uses st_intersects() to identify the various water point types (e.g. total, functional, non-functional and unknown) located inside each LGA boundary. Next, length() of Base R is used to calculate the number of water points that fall within each LGA boundary.

```{r}
#| eval: false
nga_wp2 <- nga2 %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga2, wp_nga2))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga2, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga2, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga2, wpt_unknown)))
```

### 4.5 Saving the Analytical Data Table

The code chunk below uses mutate() of dplyr package to derive 2 fields namely pct_functional and pct_non-functional. In order to keep the file size small, select() of dplyr is used to retain on the relevant fields.

```{r}
#| eval: false

nga_wp2 <- nga_wp2 %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) 

```

Thereafter, we will save the sf data table in rds format for subsequent analysis.

```{r}
#| eval: false

write_rds(nga_wp2, "geodata/nga_wp2.rds")

```

## 
